{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_1 = require(\"react\");\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Specify invoking on the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nfunction useDebouncedCallback(func, wait, options) {\n  var _this = this;\n  var lastCallTime = react_1.useRef(null);\n  var lastInvokeTime = react_1.useRef(0);\n  var timerId = react_1.useRef(null);\n  var lastArgs = react_1.useRef([]);\n  var lastThis = react_1.useRef();\n  var result = react_1.useRef();\n  var funcRef = react_1.useRef(func);\n  var mounted = react_1.useRef(true);\n  funcRef.current = func;\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  wait = +wait || 0;\n  options = options || {};\n  var leading = !!options.leading;\n  var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  var maxing = ('maxWait' in options);\n  var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n  react_1.useEffect(function () {\n    mounted.current = true;\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  var debounced = react_1.useMemo(function () {\n    var invokeFunc = function (time) {\n      var args = lastArgs.current;\n      var thisArg = lastThis.current;\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      return result.current = funcRef.current.apply(thisArg, args);\n    };\n    var startTimer = function (pendingFunc, wait) {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n    };\n    var shouldInvoke = function (time) {\n      if (!mounted.current) return false;\n      var timeSinceLastCall = time - lastCallTime.current;\n      var timeSinceLastInvoke = time - lastInvokeTime.current;\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return !lastCallTime.current || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n    };\n    var trailingEdge = function (time) {\n      timerId.current = null;\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n    var timerExpired = function () {\n      var time = Date.now();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      var timeSinceLastCall = time - lastCallTime.current;\n      var timeSinceLastInvoke = time - lastInvokeTime.current;\n      var timeWaiting = wait - timeSinceLastCall;\n      var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n    var func = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var time = Date.now();\n      var isInvoking = shouldInvoke(time);\n      lastArgs.current = args;\n      lastThis.current = _this;\n      lastCallTime.current = time;\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n    func.cancel = function () {\n      if (timerId.current) {\n        useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n    };\n    func.isPending = function () {\n      return !!timerId.current;\n    };\n    func.flush = function () {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n    return func;\n  }, [leading, maxing, wait, maxWait, trailing, useRAF]);\n  return debounced;\n}\nexports.default = useDebouncedCallback;","map":{"version":3,"names":["Object","defineProperty","exports","value","react_1","require","useDebouncedCallback","func","wait","options","_this","lastCallTime","useRef","lastInvokeTime","timerId","lastArgs","lastThis","result","funcRef","mounted","current","useRAF","window","TypeError","leading","trailing","maxing","maxWait","Math","max","useEffect","debounced","useMemo","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","cancelAnimationFrame","requestAnimationFrame","setTimeout","shouldInvoke","timeSinceLastCall","timeSinceLastInvoke","trailingEdge","timerExpired","Date","now","timeWaiting","remainingWait","min","_i","arguments","length","isInvoking","cancel","clearTimeout","isPending","flush","default"],"sources":["C:/Users/Backend Developer/raphaaa-studio/node_modules/use-debounce/lib/useDebouncedCallback.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Specify invoking on the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nfunction useDebouncedCallback(func, wait, options) {\n    var _this = this;\n    var lastCallTime = react_1.useRef(null);\n    var lastInvokeTime = react_1.useRef(0);\n    var timerId = react_1.useRef(null);\n    var lastArgs = react_1.useRef([]);\n    var lastThis = react_1.useRef();\n    var result = react_1.useRef();\n    var funcRef = react_1.useRef(func);\n    var mounted = react_1.useRef(true);\n    funcRef.current = func;\n    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n    var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = +wait || 0;\n    options = options || {};\n    var leading = !!options.leading;\n    var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n    var maxing = 'maxWait' in options;\n    var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n    react_1.useEffect(function () {\n        mounted.current = true;\n        return function () {\n            mounted.current = false;\n        };\n    }, []);\n    // You may have a question, why we have so many code under the useMemo definition.\n    //\n    // This was made as we want to escape from useCallback hell and\n    // not to initialize a number of functions each time useDebouncedCallback is called.\n    //\n    // It means that we have less garbage for our GC calls which improves performance.\n    // Also, it makes this library smaller.\n    //\n    // And the last reason, that the code without lots of useCallback with deps is easier to read.\n    // You have only one place for that.\n    var debounced = react_1.useMemo(function () {\n        var invokeFunc = function (time) {\n            var args = lastArgs.current;\n            var thisArg = lastThis.current;\n            lastArgs.current = lastThis.current = null;\n            lastInvokeTime.current = time;\n            return (result.current = funcRef.current.apply(thisArg, args));\n        };\n        var startTimer = function (pendingFunc, wait) {\n            if (useRAF)\n                cancelAnimationFrame(timerId.current);\n            timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n        };\n        var shouldInvoke = function (time) {\n            if (!mounted.current)\n                return false;\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            // Either this is the first call, activity has stopped and we're at the\n            // trailing edge, the system time has gone backwards and we're treating\n            // it as the trailing edge, or we've hit the `maxWait` limit.\n            return (!lastCallTime.current ||\n                timeSinceLastCall >= wait ||\n                timeSinceLastCall < 0 ||\n                (maxing && timeSinceLastInvoke >= maxWait));\n        };\n        var trailingEdge = function (time) {\n            timerId.current = null;\n            // Only invoke if we have `lastArgs` which means `func` has been\n            // debounced at least once.\n            if (trailing && lastArgs.current) {\n                return invokeFunc(time);\n            }\n            lastArgs.current = lastThis.current = null;\n            return result.current;\n        };\n        var timerExpired = function () {\n            var time = Date.now();\n            if (shouldInvoke(time)) {\n                return trailingEdge(time);\n            }\n            // https://github.com/xnimorz/use-debounce/issues/97\n            if (!mounted.current) {\n                return;\n            }\n            // Remaining wait calculation\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            var timeWaiting = wait - timeSinceLastCall;\n            var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n            // Restart the timer\n            startTimer(timerExpired, remainingWait);\n        };\n        var func = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var time = Date.now();\n            var isInvoking = shouldInvoke(time);\n            lastArgs.current = args;\n            lastThis.current = _this;\n            lastCallTime.current = time;\n            if (isInvoking) {\n                if (!timerId.current && mounted.current) {\n                    // Reset any `maxWait` timer.\n                    lastInvokeTime.current = lastCallTime.current;\n                    // Start the timer for the trailing edge.\n                    startTimer(timerExpired, wait);\n                    // Invoke the leading edge.\n                    return leading ? invokeFunc(lastCallTime.current) : result.current;\n                }\n                if (maxing) {\n                    // Handle invocations in a tight loop.\n                    startTimer(timerExpired, wait);\n                    return invokeFunc(lastCallTime.current);\n                }\n            }\n            if (!timerId.current) {\n                startTimer(timerExpired, wait);\n            }\n            return result.current;\n        };\n        func.cancel = function () {\n            if (timerId.current) {\n                useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n            }\n            lastInvokeTime.current = 0;\n            lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n        };\n        func.isPending = function () {\n            return !!timerId.current;\n        };\n        func.flush = function () {\n            return !timerId.current ? result.current : trailingEdge(Date.now());\n        };\n        return func;\n    }, [leading, maxing, wait, maxWait, trailing, useRAF]);\n    return debounced;\n}\nexports.default = useDebouncedCallback;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}