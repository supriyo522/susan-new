{"ast":null,"code":"import { useRef, useState, useEffect, useMemo } from 'react';\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n  var defaultRef = useRef(null); // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver\n\n  var onResize = opts.onResize;\n  var onResizeRef = useRef(undefined);\n  onResizeRef.current = onResize; // Using a single instance throughought the hook's lifetime\n\n  var resizeObserverRef = useRef();\n  var ref = opts.ref || defaultRef;\n  var _useState = useState({\n      width: undefined,\n      height: undefined\n    }),\n    size = _useState[0],\n    setSize = _useState[1]; // Using a ref to track the previous width / height to avoid unnecessary renders\n\n  var previous = useRef({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(function () {\n    if (resizeObserverRef.current) {\n      return;\n    }\n    resizeObserverRef.current = new ResizeObserver(function (entries) {\n      if (!Array.isArray(entries)) {\n        return;\n      } // Since we only observe the one element, we don't need to loop over the\n      // array\n\n      if (!entries.length) {\n        return;\n      }\n      var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n      var newWidth = Math.round(entry.contentRect.width);\n      var newHeight = Math.round(entry.contentRect.height);\n      if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n        if (onResizeRef.current) {\n          onResizeRef.current(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n  }, []);\n  useEffect(function () {\n    if (typeof ref !== \"object\" || ref === null || !(ref.current instanceof Element)) {\n      return;\n    }\n    var element = ref.current;\n    resizeObserverRef.current.observe(element);\n    return function () {\n      return resizeObserverRef.current.unobserve(element);\n    };\n  }, [ref]);\n  return useMemo(function () {\n    return {\n      ref: ref,\n      width: size.width,\n      height: size.height\n    };\n  }, [ref, size ? size.width : null, size ? size.height : null]);\n}\nexport default useResizeObserver;","map":{"version":3,"names":["useRef","useState","useEffect","useMemo","useResizeObserver","opts","defaultRef","onResize","onResizeRef","undefined","current","resizeObserverRef","ref","_useState","width","height","size","setSize","previous","ResizeObserver","entries","Array","isArray","length","entry","newWidth","Math","round","contentRect","newHeight","newSize","Element","element","observe","unobserve"],"sources":["C:/Users/KIIT/Downloads/raphaaa-studio/raphaaa-studio/node_modules/use-resize-observer/dist/bundle.esm.js"],"sourcesContent":["import { useRef, useState, useEffect, useMemo } from 'react';\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // `defaultRef` Has to be non-conditionally declared here whether or not it'll\n  // be used as that's how hooks work.\n  // @see https://reactjs.org/docs/hooks-rules.html#explanation\n  var defaultRef = useRef(null); // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver\n\n  var onResize = opts.onResize;\n  var onResizeRef = useRef(undefined);\n  onResizeRef.current = onResize; // Using a single instance throughought the hook's lifetime\n\n  var resizeObserverRef = useRef();\n  var ref = opts.ref || defaultRef;\n\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // Using a ref to track the previous width / height to avoid unnecessary renders\n\n\n  var previous = useRef({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(function () {\n    if (resizeObserverRef.current) {\n      return;\n    }\n\n    resizeObserverRef.current = new ResizeObserver(function (entries) {\n      if (!Array.isArray(entries)) {\n        return;\n      } // Since we only observe the one element, we don't need to loop over the\n      // array\n\n\n      if (!entries.length) {\n        return;\n      }\n\n      var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n      var newWidth = Math.round(entry.contentRect.width);\n      var newHeight = Math.round(entry.contentRect.height);\n\n      if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n        var newSize = {\n          width: newWidth,\n          height: newHeight\n        };\n\n        if (onResizeRef.current) {\n          onResizeRef.current(newSize);\n        } else {\n          previous.current.width = newWidth;\n          previous.current.height = newHeight;\n          setSize(newSize);\n        }\n      }\n    });\n  }, []);\n  useEffect(function () {\n    if (typeof ref !== \"object\" || ref === null || !(ref.current instanceof Element)) {\n      return;\n    }\n\n    var element = ref.current;\n    resizeObserverRef.current.observe(element);\n    return function () {\n      return resizeObserverRef.current.unobserve(element);\n    };\n  }, [ref]);\n  return useMemo(function () {\n    return {\n      ref: ref,\n      width: size.width,\n      height: size.height\n    };\n  }, [ref, size ? size.width : null, size ? size.height : null]);\n}\n\nexport default useResizeObserver;\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAE5D,SAASC,iBAAiBA,CAACC,IAAI,EAAE;EAC/B,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IACnBA,IAAI,GAAG,CAAC,CAAC;EACX;;EAEA;EACA;EACA;EACA,IAAIC,UAAU,GAAGN,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B;EACA;;EAEA,IAAIO,QAAQ,GAAGF,IAAI,CAACE,QAAQ;EAC5B,IAAIC,WAAW,GAAGR,MAAM,CAACS,SAAS,CAAC;EACnCD,WAAW,CAACE,OAAO,GAAGH,QAAQ,CAAC,CAAC;;EAEhC,IAAII,iBAAiB,GAAGX,MAAM,CAAC,CAAC;EAChC,IAAIY,GAAG,GAAGP,IAAI,CAACO,GAAG,IAAIN,UAAU;EAEhC,IAAIO,SAAS,GAAGZ,QAAQ,CAAC;MACvBa,KAAK,EAAEL,SAAS;MAChBM,MAAM,EAAEN;IACV,CAAC,CAAC;IACEO,IAAI,GAAGH,SAAS,CAAC,CAAC,CAAC;IACnBI,OAAO,GAAGJ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;EAG5B,IAAIK,QAAQ,GAAGlB,MAAM,CAAC;IACpBc,KAAK,EAAEL,SAAS;IAChBM,MAAM,EAAEN;EACV,CAAC,CAAC;EACFP,SAAS,CAAC,YAAY;IACpB,IAAIS,iBAAiB,CAACD,OAAO,EAAE;MAC7B;IACF;IAEAC,iBAAiB,CAACD,OAAO,GAAG,IAAIS,cAAc,CAAC,UAAUC,OAAO,EAAE;MAChE,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,EAAE;QAC3B;MACF,CAAC,CAAC;MACF;;MAGA,IAAI,CAACA,OAAO,CAACG,MAAM,EAAE;QACnB;MACF;MAEA,IAAIC,KAAK,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;;MAExB,IAAIK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,WAAW,CAACd,KAAK,CAAC;MAClD,IAAIe,SAAS,GAAGH,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,WAAW,CAACb,MAAM,CAAC;MAEpD,IAAIG,QAAQ,CAACR,OAAO,CAACI,KAAK,KAAKW,QAAQ,IAAIP,QAAQ,CAACR,OAAO,CAACK,MAAM,KAAKc,SAAS,EAAE;QAChF,IAAIC,OAAO,GAAG;UACZhB,KAAK,EAAEW,QAAQ;UACfV,MAAM,EAAEc;QACV,CAAC;QAED,IAAIrB,WAAW,CAACE,OAAO,EAAE;UACvBF,WAAW,CAACE,OAAO,CAACoB,OAAO,CAAC;QAC9B,CAAC,MAAM;UACLZ,QAAQ,CAACR,OAAO,CAACI,KAAK,GAAGW,QAAQ;UACjCP,QAAQ,CAACR,OAAO,CAACK,MAAM,GAAGc,SAAS;UACnCZ,OAAO,CAACa,OAAO,CAAC;QAClB;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN5B,SAAS,CAAC,YAAY;IACpB,IAAI,OAAOU,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,IAAI,EAAEA,GAAG,CAACF,OAAO,YAAYqB,OAAO,CAAC,EAAE;MAChF;IACF;IAEA,IAAIC,OAAO,GAAGpB,GAAG,CAACF,OAAO;IACzBC,iBAAiB,CAACD,OAAO,CAACuB,OAAO,CAACD,OAAO,CAAC;IAC1C,OAAO,YAAY;MACjB,OAAOrB,iBAAiB,CAACD,OAAO,CAACwB,SAAS,CAACF,OAAO,CAAC;IACrD,CAAC;EACH,CAAC,EAAE,CAACpB,GAAG,CAAC,CAAC;EACT,OAAOT,OAAO,CAAC,YAAY;IACzB,OAAO;MACLS,GAAG,EAAEA,GAAG;MACRE,KAAK,EAAEE,IAAI,CAACF,KAAK;MACjBC,MAAM,EAAEC,IAAI,CAACD;IACf,CAAC;EACH,CAAC,EAAE,CAACH,GAAG,EAAEI,IAAI,GAAGA,IAAI,CAACF,KAAK,GAAG,IAAI,EAAEE,IAAI,GAAGA,IAAI,CAACD,MAAM,GAAG,IAAI,CAAC,CAAC;AAChE;AAEA,eAAeX,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}